/* SPDX-License-Identifier: CC0-1.0 */
#pragma once

enum {
	PCI_ID,
	PCI_CMDSTS,
	PCI_CC,
	PCI_CLS_HTYPE,
	PCI_BAR,
	PCI_CAP_PTR = 0x34 >> 2,
	PCI_INT = 0x3c >> 2,
};

enum {
	PCI0_SSID = 0x2c >> 2,
	PCI0_OPTION_ROM,
};
enum {
	PCI1_BUSNR = 0x18 >> 2,
	PCI1_IO_2STS,
	PCI1_MEM,
	PCI1_PREF_MEM,
	PCI1_PREF_MEM_BASE_U,
	PCI1_PREF_MEM_LIMIT_U,
	PCI1_IO_U,
	PCI1_OPTION_ROM = 0x38 >> 2,
};

enum {
	PCI_CMD_IO_EN = 1,
	PCI_CMD_MEM_EN = 2,
	PCI_CMD_BUS_MASTER = 4,
	PCI_CMD_SPECIAL_CYC_EN = 8,
	PCI_CMD_MEM_WR_INV_EN = 16,
	PCI_CMD_VGA_PALETTE_SNOOP = 32,
	PCI_CMD_PARITY_ERR_RESP = 1 << 6,
	PCI_CMD_IDSEL_STEPPING = 1 << 7,
	PCI_CMD_SERR_EN = 1 << 8,
	PCI_CMD_FB2B_EN = 1 << 9,
	PCI_CMD_INT_DIS = 1 << 10,
	/* bits 11:15 "reserved" (RsvdP?), but PCI 3.0 spec mentions setting the entire register to 0 as a safe way to logically disconnect the device from the bus */
	/* bits 0:2 of status register are RsvdZ */
	PCI_CMDSTS_INT = 1 << 19,
	PCI_CMDSTS_CAP_LIST = 1 << 20,
	PCI_CMDSTS_66MHZ = 1 << 21,
	PCI_CMDSTS_USER_DEFINABLE_FEATURES = 1 << 22,
	PCI_CMDSTS_FB2B_CAP = 1 << 23,
	PCI_CMDSTS_MASTER_PARITY_ERR = 1 << 24,
	PCI_CMDSTS_DEVSEL_FAST = 0,
	PCI_CMDSTS_DEVSEL_MEDIUM = 1 << 25,
	PCI_CMDSTS_DEVSEL_SLOW = 2 << 25,
	PCI_CMDSTS_TARGET_ABORT_SIGNALED = 1 << 27,
	PCI_CMDSTS_TARGET_ABORT_RECEIVED = 1 << 28,
	PCI_CMDSTS_MASTER_ABORT_RECEIVED = 1 << 29,
	PCI_CMDSTS_SERR = 1 << 30,
	PCI_CMDSTS_PARITY_ERR = 1 << 31,
};

enum {
	PCIECAP_ID = 0,
	PCIECAP_DCAP,
	PCIECAP_DCS,
	PCIECAP_LCAP,
	PCIECAP_LCS,
	PCIECAP_SCAP,
	PCIECAP_SCS,
	PCIECAP_RCC,
	PCIECAP_RSTS,
	PCIECAP_DCAP2,
	PCIECAP_DCS2,
	PCIECAP_LCAP2,
	PCIECAP_LCS2,
	PCIECAP_SCAP2,
	PCIECAP_SCS2,
};

enum {
	PCIECAP_ID_ENDPOINT = 0,
	PCIECAP_ID_LEGACY = 1,
	PCIECAP_ID_ROOT_PORT = 4,
	PCIECAP_ID_UPSTREAM = 5,
	PCIECAP_ID_DOWNSTREAM = 6,
	PCIECAP_ID_PCIE2PCI = 7,
	PCIECAP_ID_PCI2PCIE = 8,
	PCIECAP_ID_RC_INTEGRATED_EP = 9,
	PCIECAP_ID_RC_EVENT_COLLECTOR = 10,
};

enum {
	PCIECAP_LCAP_L0S = 1 << 10,
	PCIECAP_LCAP_L1 = 1 << 11,
	PCIECAP_LCAP_ASPM_SHIFT = 10,
	PCIECAP_LCAP_ASPM_MASK = 3 << PCIECAP_LCAP_ASPM_SHIFT,
};

enum {
	PCIECAP_LCS_L0S = 1,
	PCIECAP_LCS_L1 = 2,
	PCIECAP_LCS_RL = 32,
	PCIECAP_LCS_LBMS = 1 << 30,
};
